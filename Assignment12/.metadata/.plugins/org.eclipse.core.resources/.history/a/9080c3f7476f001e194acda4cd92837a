//1. Create an interface Emp with abstract method double getSal() and a default method default double calcIncentives(). The default method
//simply returns 0.0. Create a class Manager (with ﬁelds basicSalary and dearanceAllowance) inherited from Emp. In this class override getSal() method
//(basicSalary + dearanceAllowance) as well as calcIncentives() method (20% of basicSalary). Create another class Labor (with ﬁelds hours and rate)
//inherited from Emp interface. In this class override getSal() method (hours * rate) as well as calcIncentives() method (5% of salary if hours > 300,
//otherwise no incentives). Create another class Clerk (with ﬁeld salary) inherited from Emp interface. In this class override getSal() method (salary). Do
//not override, calcIncentives() in Clerk class. In Emp interface create a static method static double calcTotalIncome(Emp arr[]) that calculate
//total income (salary + incentives) of all employees in the given array.

package com.sunbeam;

interface Emp
{
   public double getSal();
   default double calIncentives()
   {
	   return 0.0;
   }
}


public class Manager implements Emp {
	private double basicSalary;
	private double deAllowance;
	public Manager() {
		
	}
	public Manager(double basicSalary, double deAllowance) {
		
		this.basicSalary = basicSalary;
		this.deAllowance = deAllowance;
	}
	public double getBasicSalary() {
		return basicSalary;
	}
	public void setBasicSalary(double basicSalary) {
		this.basicSalary = basicSalary;
	}
	public double getDeAllowance() {
		return deAllowance;
	}
	public void setDeAllowance(double deAllowance) {
		this.deAllowance = deAllowance;
	}
	@Override
	public String toString() {
		return "Manager [basicSalary=" + basicSalary + ", deAllowance=" + deAllowance + "]";
	}
	
	@Override
	public double getSal() {
		
	  return basicSalary+deAllowance;
	}
	@Override
	public double calIncentives() {
		double tSalary= 0.20*this.basicSalary+this.basicSalary;
		return tSalary;
	}
	
}

public class Program001 {

}
